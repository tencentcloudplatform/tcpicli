// 2018-01-09 09:22:17.584795 -0800 PST m=+18.910494655
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots

package vpc

import (
	"encoding/json"
	"github.com/tencentcloudplatform/tcpicli/core"
)

type DescribeSubnetExResp struct {
	Code     int64  `json:"code"`
	CodeDesc string `json:"codeDesc"`
	Data     []struct {
		AvailableIPNum   int64       `json:"availableIPNum"`
		Broadcast        bool        `json:"broadcast"`
		CidrBlock        string      `json:"cidrBlock"`
		IsDefault        bool        `json:"isDefault"`
		NetworkAclID     interface{} `json:"networkAclId"`
		RouteTableID     string      `json:"routeTableId"`
		RouteTableName   string      `json:"routeTableName"`
		RtbNum           int64       `json:"rtbNum"`
		SubnetCreateTime string      `json:"subnetCreateTime"`
		SubnetID         string      `json:"subnetId"`
		SubnetName       string      `json:"subnetName"`
		TotalIPNum       int64       `json:"totalIPNum"`
		UnRouteTableID   string      `json:"unRouteTableId"`
		UnSubnetID       string      `json:"unSubnetId"`
		UnVpcID          string      `json:"unVpcId"`
		VpcCidrBlock     string      `json:"vpcCidrBlock"`
		VpcDevices       int64       `json:"vpcDevices"`
		VpcID            string      `json:"vpcId"`
		VpcName          string      `json:"vpcName"`
		Zone             string      `json:"zone"`
		ZoneID           int64       `json:"zoneId"`
	} `json:"data"`
	Message    string `json:"message"`
	TotalCount int64  `json:"totalCount"`
}

// Implement https://cloud.tencent.com/document/api/215/1371
func (c *VpcClient) DescribeSubnetEx(options ...string) (*DescribeSubnetExResp, error) {
	resp, err := c.DoAction("DescribeSubnetEx", options...)
	if err != nil {
		return nil, err
	}
	var s DescribeSubnetExResp
	err = json.Unmarshal(resp, &s)
	return &s, err
}

func DescribeSubnetEx(options ...string) (*DescribeSubnetExResp, error) {
	return DefaultClient.DescribeSubnetEx(options...)
}

func (r *DescribeSubnetExResp) String(args ...interface{}) (string, error) {
	var b []byte
	var err error
	if len(args) == 0 {
		b, err = json.MarshalIndent(r, "", "  ")
	} else if len(args) == 1 {
		if val, ok := args[0].(string); ok {
			if len(val) == 0 {
				b, err = json.MarshalIndent(r, "", "  ")
			} else {
				b, err = core.FmtOutput(val, r)
			}
		}
	}
	return string(b), err
}
