// 2018-01-09 09:22:30.085969 -0800 PST m=+31.411691759
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots

package vpc

import (
	"encoding/json"
	"github.com/tencentcloudplatform/tcpicli/core"
)

type DescribeRouteTableResp struct {
	Code     int64  `json:"code"`
	CodeDesc string `json:"codeDesc"`
	Data     []struct {
		RouteSet []struct {
			Description          interface{} `json:"description"`
			DestinationCidrBlock string      `json:"destinationCidrBlock"`
			NextHub              string      `json:"nextHub"`
			NextType             int64       `json:"nextType"`
			UnNextHub            interface{} `json:"unNextHub"`
		} `json:"routeSet"`
		RouteTableCreateTime string `json:"routeTableCreateTime"`
		RouteTableID         string `json:"routeTableId"`
		RouteTableName       string `json:"routeTableName"`
		RouteTableType       int64  `json:"routeTableType"`
		SubnetNum            int64  `json:"subnetNum"`
		UnRouteTableID       string `json:"unRouteTableId"`
		UnVpcID              string `json:"unVpcId"`
		VpcCidrBlock         string `json:"vpcCidrBlock"`
		VpcID                string `json:"vpcId"`
		VpcName              string `json:"vpcName"`
	} `json:"data"`
	Message    string `json:"message"`
	TotalCount int64  `json:"totalCount"`
}

// Implement https://cloud.tencent.com/document/api/215/1420
func (c *VpcClient) DescribeRouteTable(options ...string) (*DescribeRouteTableResp, error) {
	resp, err := c.DoAction("DescribeRouteTable", options...)
	if err != nil {
		return nil, err
	}
	var s DescribeRouteTableResp
	err = json.Unmarshal(resp, &s)
	return &s, err
}

func DescribeRouteTable(options ...string) (*DescribeRouteTableResp, error) {
	return DefaultClient.DescribeRouteTable(options...)
}

func (r *DescribeRouteTableResp) String(args ...interface{}) (string, error) {
	var b []byte
	var err error
	if len(args) == 0 {
		b, err = json.MarshalIndent(r, "", "  ")
	} else if len(args) == 1 {
		if val, ok := args[0].(string); ok {
			if len(val) == 0 {
				b, err = json.MarshalIndent(r, "", "  ")
			} else {
				b, err = core.FmtOutput(val, r)
			}
		}
	}
	return string(b), err
}
