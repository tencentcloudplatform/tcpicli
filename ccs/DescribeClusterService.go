// 2018-01-06 16:08:39.403485 -0800 PST m=+297.701883326
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots

package ccs

import (
	"encoding/json"
	"github.com/tencentcloudplatform/tcpicli/core"
)

type DescribeClusterServiceResp struct {
	Code     int64  `json:"code"`
	CodeDesc string `json:"codeDesc"`
	Data     struct {
		Services []struct {
			AccessType      string `json:"accessType"`
			CreatedAt       string `json:"createdAt"`
			CurrentReplicas int64  `json:"currentReplicas"`
			DesiredReplicas int64  `json:"desiredReplicas"`
			ExternalIP      string `json:"externalIp"`
			Labels          struct {
				Qcloud_app string `json:"qcloud-app"`
			} `json:"labels"`
			LbID      string `json:"lbId"`
			LbStatus  string `json:"lbStatus"`
			Namespace string `json:"namespace"`
			ReasonMap struct {
				容器未启动 int64 `json:"容器未启动"`
			} `json:"reasonMap"`
			ServiceIP    string `json:"serviceIp"`
			ServiceName  string `json:"serviceName"`
			SrcReasonMap struct {
				Container_not_started int64 `json:"container not started"`
			} `json:"srcReasonMap"`
			Status    string `json:"status"`
			SysLabels struct {
				Qcloud_app string `json:"qcloud-app"`
			} `json:"sysLabels"`
			UserLabels struct{} `json:"userLabels"`
		} `json:"services"`
		TotalCount int64 `json:"totalCount"`
	} `json:"data"`
	Message string `json:"message"`
}

// Implement https://cloud.tencent.com/document/api/457/9440
func (c *CcsClient) DescribeClusterService(options ...string) (*DescribeClusterServiceResp, error) {
	resp, err := c.DoAction("DescribeClusterService", options...)
	if err != nil {
		return nil, err
	}
	var s DescribeClusterServiceResp
	err = json.Unmarshal(resp, &s)
	return &s, err
}

func DescribeClusterService(options ...string) (*DescribeClusterServiceResp, error) {
	return DefaultClient.DescribeClusterService(options...)
}

func (r *DescribeClusterServiceResp) String(args ...interface{}) (string, error) {
	var b []byte
	var err error
	if len(args) == 0 {
		b, err = json.MarshalIndent(r, "", "  ")
	} else if len(args) == 1 {
		if val, ok := args[0].(string); ok {
			if len(val) == 0 {
				b, err = json.MarshalIndent(r, "", "  ")
			} else {
				b, err = core.FmtOutput(val, r)
			}
		}
	}
	return string(b), err
}
